/**
 * @file Firestore Security Rules for AniStream.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and watchlists.
 *   Anime data is publicly readable, while comments are readable by anyone but writable only by authenticated users.
 * @data_structure Data is organized hierarchically:
 *   - /users/{userId}: User profiles, accessible only by the user themselves.
 *   - /users/{userId}/watchlists/{watchlistId}: Watchlists owned by a specific user.
 *   - /anime/{animeId}: Publicly accessible anime data.
 *   - /animes/{animeId}/comments/{commentId}: Comments associated with an anime.
 * @key_security_decisions
 *   - Users can only access their own profile and watchlists.
 *   - Anime data is publicly readable.
 *   - Only authenticated users can create comments.
 *   - Data schema validation is relaxed during this prototyping phase, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123', username: 'testuser', email: 'test@example.com' } } }
     * @allow (get) User with ID 'user123' can read their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource: { data: { id: 'user123' } } }
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isCreatingOwnDocument(userId);
      allow update: if isExistingOwner(userId) && isUserIdNotChanged(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to watchlist documents under a user's profile.
     * @path /users/{userId}/watchlists/{watchlistId}
     * @allow (create) User with ID 'user123' can create a watchlist under their profile.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123' } } }
     * @allow (get) User with ID 'user123' can read a watchlist under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (list) User with ID 'user123' can list watchlists under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update a watchlist under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (delete) User with ID 'user123' can delete a watchlist under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a watchlist for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource: { data: { userId: 'user123' } } }
     * @deny (get) User with ID 'user456' cannot read a watchlist belonging to user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (list) User with ID 'user456' cannot list watchlists belonging to user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update) User with ID 'user456' cannot update a watchlist belonging to user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (delete) User with ID 'user456' cannot delete a watchlist belonging to user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/watchlists/{watchlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to anime documents.
     * @path /anime/{animeId}
     * @allow (get) Any user can read anime data.
     *   Request: { auth: null }
     * @allow (list) Any user can list anime data.
     *   Request: { auth: null }
     * @deny (create) No one can create anime documents.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (update) No one can update anime documents.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (delete) No one can delete anime documents.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Public read access with no write access.
     */
    match /anime/{animeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to comments for each anime.
     * @path /animes/{animeId}/comments/{commentId}
     * @allow (get) Any user can read comments.
     *   Request: { auth: null }
     * @allow (list) Any user can list comments.
     *   Request: { auth: null }
     * @allow (create) Authenticated users can create comments.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (update) No one can update comments.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (delete) No one can delete comments.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Allows public read and authenticated write for comments.
     */
    match /animes/{animeId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  //Check if the user ID on the document has changed
  function isUserIdNotChanged(userId) {
      return request.resource.data.id == resource.data.id;
  }

  function isCreatingOwnDocument(userId) {
    return request.auth.uid == userId && request.resource.data.id == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}