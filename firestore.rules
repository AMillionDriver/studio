/**
 * @fileOverview Firestore Security Rules for AniStream.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and watchlists.
 * Anime data is publicly readable, but only authorized users can create, update, or delete it.
 * Comments are publicly readable and any signed-in user can create them. Only the comment's author can update or delete their own comments.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured with owner-only access.
 * - /users/{userId}/watchlists/{watchlistId}: Stores user watchlists, secured with owner-only access.
 * - /anime/{animeId}: Stores anime information, publicly readable.
 * - /anime/{animeId}/comments/{commentId}: Stores comments for each anime, publicly readable, with owner-only updates and deletes.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles and watchlists.
 * - Listing of user watchlists is allowed only for the owner.
 * - Anime data is publicly readable to facilitate discovery.
 * - Any authenticated user can create a comment.
 * - Comments include denormalized userId for independent authorization.
 *
 * Denormalization for Authorization:
 * - Comments include the userId of the author to enable direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owning user can read and write.
     * @path /users/{userId}
     * @allow (create) - User A can create their own profile (auth.uid == userId).
     * @allow (get, update, delete) - User A can get, update, or delete their own profile (auth.uid == userId).
     * @deny (create) - User A cannot create a profile with a different userId.
     * @deny (get, update, delete) - User A cannot get, update, or delete User B's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects user watchlists, ensuring only the owning user can read and write.
     * @path /users/{userId}/watchlists/{watchlistId}
     * @allow (create) - User A can create a watchlist under their profile.
     * @allow (get, update, delete) - User A can get, update, or delete a watchlist under their profile.
     * @allow (list) - User A can list watchlists under their profile.
     * @deny (create) - User A cannot create a watchlist under User B's profile.
     * @deny (get, update, delete) - User A cannot get, update, or delete a watchlist under User B's profile.
     * @principle Enforces document ownership for watchlists nested under user profiles.
     */
    match /users/{userId}/watchlists/{watchlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to anime data, while restricting writes.
     * @path /anime/{animeId}
     * @allow (get, list) - Any user can read anime data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete anime data.
     * @principle Enables public data consumption with restricted write access.
     */
    match /anime/{animeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to comments, and allows signed-in users to create them.
     *              Only the comment's author can update or delete.
     * @path /anime/{animeId}/comments/{commentId}
     * @allow (get, list) - Any user can read comments.
     * @allow (create) - Any signed-in user can create a comment.
     * @allow (update, delete) - Only the comment's author can update or delete their comment.
     * @deny (create) - Non-signed-in users cannot create comments.
     * @deny (update, delete) - User A cannot update or delete User B's comment.
     * @principle Enables public comment consumption with restricted write access based on ownership.
     */
    match /anime/{animeId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}